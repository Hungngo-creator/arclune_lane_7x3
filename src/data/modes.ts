import { getLotterySplit, getPityConfig, getShopTaxRate } from './economy.ts';

import type {
  LotterySplit,
  MenuSectionDefinition,
  ModeConfig,
  ModeGroup,
  PityConfiguration
} from '../types/config.ts';

const SSR_PITY: PityConfiguration | null = getPityConfig('SSR');
const UR_PITY: PityConfiguration | null = getPityConfig('UR');
const PRIME_PITY: PityConfiguration | null = getPityConfig('PRIME');
const LOTTERY_SPLIT: LotterySplit = getLotterySplit();
const BASE_TAX_RATE = getShopTaxRate('N');
const TOP_TAX_RATE = getShopTaxRate('PRIME');
const PVE_SESSION_MODULE_ID = '@modes/pve/session.ts' as const;
const COMING_SOON_MODULE_ID = '@modes/coming-soon.stub.ts' as const;
const LINEUP_SCREEN_MODULE_ID = '@screens/lineup/index.ts' as const;
const COLLECTION_SCREEN_MODULE_ID = '@screens/collection/index.ts' as const;

const MODE_TYPES = {
  PVE: 'PvE',
  PVP: 'PvP',
  ECONOMY: 'Kinh t·∫ø'
} as const satisfies Readonly<Record<'PVE' | 'PVP' | 'ECONOMY', string>>;

const MODE_STATUS = {
  AVAILABLE: 'available',
  COMING_SOON: 'coming-soon',
  PLANNED: 'planned'
} as const satisfies Readonly<Record<'AVAILABLE' | 'COMING_SOON' | 'PLANNED', string>>;

type ModeStatus = typeof MODE_STATUS[keyof typeof MODE_STATUS];

const MENU_SECTION_DEFINITIONS = [
  { id: 'core-pve', title: 'PvE' },
  { id: 'economy', title: 'Kinh t·∫ø & H·∫° t·∫ßng' }
] satisfies ReadonlyArray<MenuSectionDefinition>;

const MODE_GROUPS = [
  {
    id: 'arena-hub',
    title: 'Chi·∫øn Tr∆∞·ªùng',
    shortDescription: 'T·ª• ƒëi·ªÉm t·ªïng h·ª£p c√°c ho·∫°t ƒë·ªông chi·∫øn ƒë·∫•u lu√¢n phi√™n ƒë·ªÉ ng∆∞·ªùi ch∆°i b∆∞·ªõc v√†o chi·∫øn d·ªãch, th·ª≠ th√°ch v√† m√πa gi·∫£i.',
    icon: 'üèüÔ∏è',
    tags: ['PvE', 'PvP'],
    menuSections: ['core-pve'],
    childModeIds: ['arena', 'beast-arena', 'ares', 'challenge', 'campaign'],
    extraClasses: ['mode-card--wide']
  }
] satisfies ReadonlyArray<ModeGroup>;

const MODES = [
  {
    id: 'campaign',
    title: 'Chi·∫øn D·ªãch',
    type: MODE_TYPES.PVE,
    status: MODE_STATUS.AVAILABLE,
    icon: 'üõ°Ô∏è',
    shortDescription: 'PvE c·ªët truy·ªán tr√™n b·∫£n ƒë·ªì 2D ƒë·ªÉ ƒëi nhi·ªám v·ª•, nh·∫∑t v·∫≠t ph·∫©m ƒë·ªôt ph√° v√† m·ªü kh√≥a ki·∫øn tr√∫c t√¥ng m√¥n.',
    unlockNotes: 'M·ªü t·ª´ ƒë·∫ßu; ti·∫øn tr√¨nh m·ªü r·ªông sang h·ªá tu luy·ªán 15 ƒë·∫°i c·∫£nh gi·ªõi v√† t√°i thi·∫øt c√°c ki·∫øn tr√∫c t√¥ng m√¥n.',
    tags: ['PvE'],
    menuSections: ['core-pve'],
    parentId: 'arena-hub',
    shell: {
      screenId: 'pve-session',
      moduleId: PVE_SESSION_MODULE_ID,
      defaultParams: { modeKey: 'campaign' }
    }
  },
  {
    id: 'challenge',
    title: 'Th·ª≠ Th√°ch',
    type: MODE_TYPES.PVE,
    status: MODE_STATUS.AVAILABLE,
    icon: 'üéØ',
    shortDescription: 'C√°c m√†n PvE v·ªõi ƒë·ªôi h√¨nh c·ªë ƒë·ªãnh c√πng ph·∫ßn th∆∞·ªüng ƒë·∫∑c bi·ªát d√†nh cho ng∆∞·ªùi v∆∞·ª£t qua.',
    unlockNotes: 'C√≥ s·∫µn ƒë·ªÉ th·ª≠ s·ª©c v·ªõi c√°c ƒë·ªôi h√¨nh c·ªë ƒë·ªãnh v√† nh·∫≠n ph·∫ßn th∆∞·ªüng th·ª≠ th√°ch ƒë·∫∑c bi·ªát.',
    tags: ['PvE'],
    menuSections: ['core-pve'],
    parentId: 'arena-hub',
    shell: {
      screenId: 'pve-session',
      moduleId: PVE_SESSION_MODULE_ID,
      defaultParams: { modeKey: 'challenge' }
    }
  },
  {
    id: 'arena',
    title: 'ƒê·∫•u Tr∆∞·ªùng',
    type: MODE_TYPES.PVE,
    status: MODE_STATUS.AVAILABLE,
    icon: 'üèüÔ∏è',
    shortDescription: 'Deck PvE ƒë·ªëi ƒë·∫ßu deck do AI ƒëi·ªÅu khi·ªÉn, xoay v√≤ng m√πa gi·∫£i 7 ng√†y v·ªõi b·∫£ng x·∫øp h·∫°ng ph·∫ßn th∆∞·ªüng.',
    unlockNotes: 'Y√™u c·∫ßu chu·∫©n b·ªã deck x·∫øp s·∫µn; tham chi·∫øn theo m√πa 7 ng√†y ƒë·ªÉ nh·∫≠n th∆∞·ªüng v√† leo b·∫£ng.',
    tags: ['PvE'],
    menuSections: ['core-pve'],
    parentId: 'arena-hub',
    shell: {
      screenId: 'pve-session',
      moduleId: PVE_SESSION_MODULE_ID,
      defaultParams: { modeKey: 'arena' }
    }
  },
  {
    id: 'ares',
    title: 'Ares',
    type: MODE_TYPES.PVP,
    status: MODE_STATUS.COMING_SOON,
    icon: '‚öîÔ∏è',
    shortDescription: 'PvP th·ªùi gian th·ª±c, hi·ªÉn th·ªã "Coming soon" cho t·ªõi khi h·∫° t·∫ßng networking ho√†n t·∫•t.',
    unlockNotes: 'Ch·ªù k·∫øt n·ªëi h·ªá th·ªëng PvP online realtime tr∆∞·ªõc khi m·ªü cho ng∆∞·ªùi ch∆°i.',
    tags: ['PvP', 'Coming soon'],
    menuSections: ['core-pve'],
    parentId: 'arena-hub',
    shell: {
      screenId: 'main-menu',
      fallbackModuleId: COMING_SOON_MODULE_ID
    }
  },
  {
    id: 'tongmon',
    title: 'T√¥ng M√¥n',
    type: MODE_TYPES.ECONOMY,
    status: MODE_STATUS.COMING_SOON,
    icon: 'üèØ',
    shortDescription: 'Qu·∫£n l√Ω Tr·∫•n Y√™u Th√°p, T√†ng Kinh C√°c, ƒêan Phong v√† Tu Luy·ªán Ph√≤ng g·∫Øn v·ªõi kinh t·∫ø nguy√™n tinh.',
    unlockNotes: 'M·ªü khi ng∆∞·ªùi ch∆°i t√°i thi·∫øt t√¥ng m√¥n t√†n t·∫°, li√™n k·∫øt ti·∫øn tr√¨nh PvE v√† d√≤ng nguy√™n tinh.',
    tags: ['Kinh t·∫ø nguy√™n tinh', 'Coming soon'],
    menuSections: ['economy'],
    shell: {
      screenId: 'main-menu',
      fallbackModuleId: COMING_SOON_MODULE_ID
    }
  },
  {
    id: 'gacha',
    title: 'Gacha',
    type: MODE_TYPES.ECONOMY,
    status: MODE_STATUS.COMING_SOON,
    icon: 'üé≤',
    shortDescription: `Qu·∫ßy gacha ph√¢n tab Nh√¢n V·∫≠t, C√¥ng Ph√°p, V≈© Kh√≠, S·ªßng Th√∫ v·ªõi b·∫£o hi·ªÉm ${SSR_PITY?.hardPity || 60}/${UR_PITY?.hardPity || 70}/${PRIME_PITY?.hardPity || 80} l∆∞·ª£t cho c√°c banner SSR/UR/Prime.`,
    unlockNotes: `Banner UR b·∫£o hi·ªÉm SSR ·ªü l∆∞·ª£t ${UR_PITY?.softGuarantees?.[0]?.pull || 50}; banner Prime l·∫ßn l∆∞·ª£t b·∫£o hi·ªÉm SSR/UR ·ªü ${PRIME_PITY?.softGuarantees?.map(({ pull }) => pull).join('/') || '40/60'} v√† Prime ·ªü ${PRIME_PITY?.hardPity || 80}.`,
    tags: ['Kinh t·∫ø nguy√™n tinh', 'Coming soon'],
    menuSections: ['economy'],
    shell: {
      screenId: 'main-menu',
      fallbackModuleId: COMING_SOON_MODULE_ID
    }
  },
  {
    id: 'lineup',
    title: 'ƒê·ªôi H√¨nh',
    type: MODE_TYPES.ECONOMY,
    status: MODE_STATUS.AVAILABLE,
    icon: 'üßæ',
    shortDescription: 'Qu·∫£n l√Ω c√°c ƒë·ªôi h√¨nh ƒë·ªÅ xu·∫•t cho PvE, PvP th·ª≠ nghi·ªám v√† h·∫° t·∫ßng kinh t·∫ø.',
    unlockNotes: 'M·ªü khi ng∆∞·ªùi ch∆°i ho√†n t·∫•t h∆∞·ªõng d·∫´n x√¢y d·ª±ng ƒë·ªôi h√¨nh ƒë·∫ßu ti√™n trong ph·∫ßn Chi·∫øn D·ªãch.',
    tags: ['Kinh t·∫ø nguy√™n tinh'],
    menuSections: ['economy'],
    shell: {
      screenId: 'lineup',
      moduleId: LINEUP_SCREEN_MODULE_ID,
      defaultParams: {
        shortDescription: 'Theo d√µi ƒë·ªôi h√¨nh ƒë·ªÅ xu·∫•t v√† c·∫•u tr√∫c t·ªï ƒë·ªôi t·ªëi ∆∞u cho t·ª´ng m·ª•c ti√™u.',
        lineups: [
          {
            id: 'starter-balance',
            title: 'Kh·ªüi ƒë·∫ßu C√¢n b·∫±ng',
            role: 'PvE c·ªët truy·ªán',
            description: 'ƒê·ªôi h√¨nh 3 DPS linh ho·∫°t k√®m 1 h·ªó tr·ª£ buff v√† 1 tanker gi·ªØ aggro cho c√°c m√†n ƒë·∫ßu.',
            members: [
              'Th·∫ßn Ki·∫øm L·ª•c ·∫¢nh ¬∑ DPS',
              'Huy·ªÅn Ch√¢n ƒêan S∆∞ ¬∑ H·ªó tr·ª£',
              'Thi√™n Khuy·∫øt Long ·∫®n ¬∑ DPS',
              'Th√°nh H·ªô V·ªá Vi√™m L√¢n ¬∑ Tank',
              'Th√°i √Çm Tuy·∫øt H·ªì ¬∑ DPS ph·ª•'
            ]
          }
        ]
      }
    }
  },
  {
    id: 'collection',
    title: 'B·ªô S∆∞u T·∫≠p',
    type: MODE_TYPES.ECONOMY,
    status: MODE_STATUS.AVAILABLE,
    icon: 'üìö',
    shortDescription: 'Hi·ªÉn th·ªã h·ªì s∆° nh√¢n v·∫≠t, s·ªßng th√∫, c√¥ng ph√°p, rank budget, sao v√† class t·ª´ d·ªØ li·ªáu t·ªïng h·ª£p.',
    unlockNotes: 'M·ªü khi ng∆∞·ªùi ch∆°i b·∫Øt ƒë·∫ßu thu th·∫≠p nh√¢n v·∫≠t v√† s·ªßng th√∫ ƒë·ªÉ theo d√µi ti·∫øn tr√¨nh n√¢ng sao v√† rank budget.',
    tags: ['Kinh t·∫ø nguy√™n tinh'],
    menuSections: ['economy'],
    shell: {
      screenId: 'collection',
      moduleId: COLLECTION_SCREEN_MODULE_ID
    }
  },
  {
    id: 'market',
    title: 'Ch·ª£ ƒêen & Shop Dev',
    type: MODE_TYPES.ECONOMY,
    status: MODE_STATUS.COMING_SOON,
    icon: 'üí∞',
    shortDescription: `Trao ƒë·ªïi v·∫≠t ph·∫©m gi·ªØa ng∆∞·ªùi ch∆°i v·ªõi thu·∫ø theo b·∫≠c t·ª´ ${Math.round((BASE_TAX_RATE || 0) * 100)}% t·ªõi ${Math.round((TOP_TAX_RATE || 0) * 100)}% c√πng shop dev b√°n v·∫≠t ph·∫©m b·∫±ng ti·ªÅn th·∫≠t.`,
    unlockNotes: 'M·ªü khi n·ªÅn kinh t·∫ø ·ªïn ƒë·ªãnh ƒë·ªÉ ng∆∞·ªùi ch∆°i giao d·ªãch, ƒë·ªìng th·ªùi k√≠ch ho·∫°t k√™nh shop c·ªßa dev.',
    tags: ['Kinh t·∫ø nguy√™n tinh', 'Coming soon'],
    menuSections: ['economy'],
    shell: {
      screenId: 'main-menu',
      fallbackModuleId: COMING_SOON_MODULE_ID
    }
  },
  {
    id: 'events',
    title: 'S·ª± Ki·ªán & V√© S·ªë',
    type: MODE_TYPES.ECONOMY,
    status: MODE_STATUS.COMING_SOON,
    icon: 'üéüÔ∏è',
    shortDescription: 'Event gi·ªõi h·∫°n th·ªùi gian k·∫øt h·ª£p v√© s·ªë d√πng ti·ªÅn t·ªá trong game v·ªõi c∆° ch·∫ø chia doanh thu r√µ r√†ng.',
    unlockNotes: `V√© s·ªë chuy·ªÉn ${Math.round((LOTTERY_SPLIT.devVault || 0) * 100)}% cho qu·ªπ v·∫≠n h√†nh v√† ${Math.round((LOTTERY_SPLIT.prizePool || 0) * 100)}% v√†o qu·ªπ gi·∫£i th∆∞·ªüng, k√≠ch ho·∫°t theo l·ªãch s·ª± ki·ªán.`,
    tags: ['Kinh t·∫ø nguy√™n tinh', 'Coming soon'],
    menuSections: ['economy'],
    shell: {
      screenId: 'main-menu',
      fallbackModuleId: COMING_SOON_MODULE_ID
    }
  },
  {
    id: 'social',
    title: 'Chat & X√£ h·ªôi',
    type: MODE_TYPES.ECONOMY,
    status: MODE_STATUS.COMING_SOON,
    icon: 'üí¨',
    shortDescription: 'Khung chat realtime c√πng k√™nh th√¥ng b√°o c·ªông ƒë·ªìng ƒë·ªÉ ng∆∞·ªùi ch∆°i t∆∞∆°ng t√°c.',
    unlockNotes: 'M·ªü khi h·ªá th·ªëng chat realtime ho√†n thi·ªán ƒë·ªÉ player tr√≤ chuy·ªán v√† nh·∫≠n th√¥ng b√°o.',
    tags: ['Coming soon'],
    menuSections: ['economy'],
    shell: {
      screenId: 'main-menu',
      fallbackModuleId: COMING_SOON_MODULE_ID
    }
  },
  {
    id: 'beast-arena',
    title: 'ƒê·∫•u Th√∫ Tr∆∞·ªùng',
    type: MODE_TYPES.PVP,
    status: MODE_STATUS.COMING_SOON,
    icon: 'üêæ',
    shortDescription: 'ƒê∆∞a s·ªßng th√∫ chi·∫øn ƒë·∫•u t·ª± ƒë·ªông ƒë·ªÉ leo h·ªá th·ªëng rank t·ª´ ƒê·ªìng t·ªõi ƒê·∫•u Th·∫ßn theo s·ªë tr·∫≠n th·∫Øng.',
    unlockNotes: 'Y√™u c·∫ßu s·ªü h·ªØu s·ªßng th√∫ v√† tham gia m√πa gi·∫£i ƒë·ªÉ leo h·∫°ng, nh·∫≠n th∆∞·ªüng ·ªü m·ªçi b·∫≠c v√† ph·∫ßn th∆∞·ªüng ƒë·∫∑c bi·ªát cho top.',
    tags: ['PvP', 'Coming soon'],
    menuSections: ['core-pve'],
    parentId: 'arena-hub',
    shell: {
      screenId: 'main-menu',
      fallbackModuleId: COMING_SOON_MODULE_ID
    }
  }
] satisfies ReadonlyArray<ModeConfig>;

const MODE_INDEX: Readonly<Record<string, ModeConfig>> = MODES.reduce<Record<string, ModeConfig>>((acc, mode) => {
  acc[mode.id] = mode;
  return acc;
}, {});

interface ListModesOptions {
  includeStatuses?: ReadonlyArray<ModeStatus>;
}

function listModesForSection(sectionId: string, options: ListModesOptions = {}): ModeConfig[]{
  const { includeStatuses } = options;
  return MODES.filter(mode => {
    if (!mode.menuSections || !mode.menuSections.includes(sectionId)){
      return false;
    }
    if (Array.isArray(includeStatuses) && includeStatuses.length > 0){
      return includeStatuses.includes(mode.status);
    }
    return true;
  });
}

type MenuSectionEntryDefinition = {
  id: string;
  type: 'group' | 'mode';
  cardId: string;
  childModeIds: ReadonlyArray<string>;
};

function getMenuSections(options: ListModesOptions = {}){
  const { includeStatuses } = options;
  const includeSet = Array.isArray(includeStatuses) && includeStatuses.length > 0
    ? new Set(includeStatuses)
    : null;

  const filterChildModeIds = (childIds: ReadonlyArray<string> = []) => {
    return childIds.filter(childId => {
      const mode = MODE_INDEX[childId];
      if (!mode) return false;
      if (includeSet && !includeSet.has(mode.status)) return false;
      return true;
    });
  };
  return MENU_SECTION_DEFINITIONS.map(section => {
    const entries: MenuSectionEntryDefinition[] = [];

    MODE_GROUPS.forEach(group => {
      if (!group.menuSections || !group.menuSections.includes(section.id)) return;
      const childModeIds = filterChildModeIds(group.childModeIds);
      if (childModeIds.length === 0) return;
      entries.push({
        id: group.id,
        type: 'group',
        cardId: group.id,
        childModeIds
      });
    });

    const standaloneModes = listModesForSection(section.id, { includeStatuses })
      .filter(mode => !mode.parentId);

    standaloneModes.forEach(mode => {
      entries.push({
        id: mode.id,
        type: 'mode',
        cardId: mode.id,
        childModeIds: [mode.id]
      });
    });

    if (entries.length === 0) return null;

    return {
      id: section.id,
      title: section.title,
      entries
    };
   }).filter((entry): entry is NonNullable<typeof entry> => Boolean(entry));
}

export {
  MODES,
  MODE_GROUPS,
  MODE_TYPES,
  MODE_STATUS,
  MENU_SECTION_DEFINITIONS,
  MODE_INDEX,
  listModesForSection,
  getMenuSections
};